适配器模式：将一个类的接口转换成Client期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。
外观模式：简化接口，使Client从底层的子类中解耦。

适配器模式与装饰者模式有点形似；但装饰者模式意图在于不改变接口的前提下，给类添加职责；而适配器模式意图在于转换接口。当然，适配器模式也可以在
转换时对原接口做优化。

在Java中，适配器模式主要通过组合实现“对象”适配器，而在多继承语言中，可以通过同时继承被适配类和目标类，实现“类”适配器。“类”适配器的优点在于
必要时可沿用被适配类的代码，不便之处在于，如果被适配类改变了，适配器必须修改或重新实现，而且不能适配子类。

外观模式并没有封装底层接口，在简化接口的同时，依然将系统完整的底层接口暴露出来，供有需要的Client调用。